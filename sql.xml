<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE root [   <!ELEMENT root ANY>   <!ELEMENT item ANY>   <!ATTLIST item ID ID #REQUIRED>   <!ATTLIST item Explanation CDATA #IMPLIED>]>
<root>
	<item ID="basic_user">
		<item ID="basic_user__session_update">
			update basic_user_session set

			session = '__r_session__'
			,lastaction = 'session_update'
			,lastactiontime = '__lastactiontime__'
			,count_actions = count_actions + 1

			where user_code = __user_code__ and
			(
			md5( concat( session, hour(now()) ) ) = __session__ or
			md5( concat( session, hour(now())-1 ) ) = __session__
			)
		</item>
		<item ID="basic_user__getSession">
			select user_type,group_code,permissions,groups,session from basic_user_session where
			user_code = __user_code__
		</item>
		<item ID="basic_user__logout">
			delete from basic_user_session where user_code = __user_code__ and
			(
			md5( concat( session, hour(now()) ) ) = __session__ or
			md5( concat( session, hour(now())-1 ) ) = __session__
			)
		</item>
		<item ID="basic_user__login_session">
			insert into basic_user_session
			(
			user_id
			,user_code
			,group_code
			,groups
			,user_type
			,permissions
			,session
			,ip
			,client
			,gis_lat
			,gis_lot
			) values (
			(select id from basic_user where username = '__username__')
			,'__username__'
			,(select group_code from basic_user where username = '__username__')
			,(select group_all from basic_user where username = '__username__')
			,(select type from basic_user where username = '__username__')
			,'__permissions__'
			,'__session__'
			,'__ip__'
			,'__client__'
			,'__gis_lat__'
			,'__gis_lot__'
			);
		</item>
		<item ID="basic_user__login_check">
			select

			basic_user.username,
			basic_user.password,
			basic_user.money,
			basic_user.credits,
			basic_user.group_code,
			basic_user.group_all,
			basic_user.id,
			basic_user.type,
			basic_user.status,
			basic_user_session.session,
			basic_user_session.ip,
			basic_user_session.client,

			(select value from basic_parameter where reference = 'basic_user__type' and basic_parameter.code = basic_user.type) as type_,
			(select value from basic_parameter where reference = 'basic_user__status' and basic_parameter.code = basic_user.status) as status_

			from basic_user left join basic_user_session on basic_user.username = basic_user_session.user_code  where basic_user.username = '__username__' and
			
			EXISTS (select basic_group.code from basic_group where basic_group.code =
			basic_user.group_code and basic_group.status = '10')

		</item>
		<item ID="basic_user__login_logout">
			delete from basic_user_session where user_code = '__user_code__'
		</item>
		<item ID="basic_user__getPermission">
		select * from 
		(
		select permission_code,cost,credits from basic_group_2_permission where group_code in (
		SELECT group_code from basic_group_2_user where user_code = '__username__'
		)) temptable
		left join basic_permission on temptable.permission_code = basic_permission.code
		
		order by code

		</item>
		<item ID="basic_user__grid">
			select

			username
			,money
			,credits
			,lastlogintime
			,lastlogouttime
			,(select name from basic_group where code = basic_user.group_code ) as
			group_name
			,group_code
			,type
			,id
			,status
			,time_created
			,creater_code
			,creater_group_code,
			(select extend4 from basic_memory where code = basic_user.type and extend5 =
			'basic_user__type') as type_,
			(select extend4 from basic_memory where code = basic_user.status and extend5
			= 'basic_user__status') as status_

			from basic_user
		</item>
		<item ID="basic_user__view">
			SELECT

			basic_user.username,
			basic_user.money,
			basic_user.credits,
			left(basic_user.lastlogintime,10) as lastlogintime,
			left(basic_user.lastlogouttime,10) as lastlogouttime,
			basic_user.count_login,
			basic_user.count_actions_period,
			basic_user_session.client,
			basic_user_session.ip,
			basic_user_session.session,
			basic_user.count_actions,
			basic_user.group_code,
			basic_user.group_all,

			basic_user.id,
			basic_user.creater_code,
			basic_user.creater_group_code,
			left(basic_user.time_created,10) as time_created,
			left(basic_user.time_lastupdated,10) as time_lastupdated,
			basic_user.count_updated,
			basic_user.`type`,
			basic_user.`status`,
			(select extend4 from basic_memory where code = basic_user.type and extend5 =
			'basic_user__type') as type_,
			(select extend4 from basic_memory where code = basic_user.status and extend5
			= 'basic_user__status') as status_,

			basic_user.remark

			FROM
			basic_user
			Left Join basic_user_session ON basic_user.username =
			basic_user_session.user_code
			where basic_user.id = __id__

		</item>
		<item ID="basic_user__group_get">
			SELECT
			basic_group.name,
			basic_group.code,
			t.user_code
			FROM
			basic_group
			Left Join (select user_code,group_code from basic_group_2_user where
			user_code = __username__) t ON basic_group.code = t.group_code

			order by basic_group.code
		</item>
		<item ID="TEMP">

		</item>
	</item>
	<item ID="basic_group">
		<item ID="basic_group__permission_get">
			SELECT
			basic_permission.name,
			basic_permission.code,
			basic_permission.icon,

			basic_group_2_permission.cost,
			basic_group_2_permission.credits

			FROM
			basic_permission
			left Join ( select * from basic_group_2_permission where group_code =
			__group_code__ ) basic_group_2_permission ON basic_permission.code =
			basic_group_2_permission.permission_code

		</item>
		<item ID="basic_group__grid">
			SELECT
			basic_group.name,
			basic_group.code,
			basic_group.count_users,

			type,id,status,
			(select extend4 from basic_memory where code = basic_group.type and extend5
			= 'basic_group__type') as type_,
			(select extend4 from basic_memory where code = basic_group.status and
			extend5 = 'basic_group__status') as status_

			FROM
			basic_group
		</item>
		<item ID="basic_group__simulate_permission">
insert into basic_group_2_permission (permission_code,group_code)
SELECT
basic_permission.`code` as permission_code
,basic_group.`code` as group_code
FROM
basic_permission ,
basic_group 
WHERE 
((basic_permission.`code` >= '60'  AND basic_permission.`code` not like '%1_' and basic_permission.`code` not like '%2_' and basic_permission.`code` not like '6005%' ) or  basic_permission.code like '11%' )
AND basic_group.`code` like '%-%-%-%-%' 
		</item>
	</item>
	<item ID="basic_memory">
		<item ID="basic_memory__init">
			delete from basic_memory where type = 2;
			insert into basic_memory (code,type,extend1) values ('basic_user','2',0);
			update basic_memory set extend1 = (select max(id) from basic_user) where code = 'basic_user' and type = 2;
			insert into basic_memory (code,type,extend1) values ('basic_group','2',0);
			update basic_memory set extend1 = (select max(id) from basic_group) where code = 'basic_group' and type = 2;			
			select 1
		</item>
		<item ID="basic_memory__id">
			select extend1 as id from basic_memory where type = 2 and code = __code__
		</item>
		<item ID="basic_memory__id_add">
			update basic_memory set extend1 = (extend1 + 1) where type = 2 and code = __code__
		</item>
		<item ID="basic_memory__id_update">
			update basic_memory set extend1 = ((select max(id) from
			__code__)) where type
			= 2 and code =
			'__code__'
		</item>
	</item>
	<item ID="basic_parameter">
        <item ID="basic_parameter__json">
SELECT
basic_parameter.code,
basic_parameter.value,
basic_parameter.reference
FROM
basic_parameter
WHERE basic_parameter.reference like '%\_%\_\_%' ESCAPE '\'
ORDER BY
basic_parameter.reference ASC
        </item>
	</item>
</root>